http://blog.bdoughan.com/2010/08/using-xmlanyelement-to-build-generic.html

Note 1:
When customer annotated by @XmlRootElement, the test:
message.getBody() instanceof Customer
return true.

message.getBody() return personal.xml.jaxb.bindingframework.annotation.xmlanyelement.Customer

If it is not annotated with @XmlRootElement, or it is not registered with JAXBContent.newInstance(...)
the test:
message.getBody() instanceof Customer
return false.

message.getBody() return class: com.sun.org.apache.xerces.internal.dom.ElementNSImpl

Note 2:
When
@XmlAnyElement(lax = false)

the test:
message.getBody() instanceof Customer
return false.

message.getBody() return class: com.sun.org.apache.xerces.internal.dom.ElementNSImpl

Note 3:
In this case, you using:
    @XmlAnyElement(lax = true)
    private Object body;
If you provide 2 Customers in xml, the later will win.

where is lax coming from:
https://www.w3.org/TR/xmlschema11-1/
strict, skip, lax.

what is lax=true means:
https://docs.oracle.com/javaee/5/api/javax/xml/bind/annotation/XmlAnyElement.html#lax()

the "lax" in w3c means:
If the item has a uniquely determined declaration available, it must be 路valid路 with respect to that declaration,
that is, 路validate路 if you can, don't worry if you can't.
in Jaxb, it means using Class if you can, using Dom if you can't.
