Note 1:
If A.class in not in JAXBContext.newInstance(), the element "a" will be a dom.ElementNSImpl.
Even B.class and ObjectFactory.class is not in JAXBContext.newInstance(), the element "b" is always a JAXBElement.

Note 2:
The interface "DomHandler" is generic.

Note 3:
If you have value="CHandler", this handler will deal with all element that belong to dom.ElementNSImpl
that's why it called DomHandler.

If you don't have value="CHandler", the default returned object will be:
com.sun.org.apache.xerces.internal.dom.ElementNSImpl
If you have defined value="CHandler", the returned object will comes from method:
String getElement(StreamResult rt)

Note 4:
It seems that if want to let the handler do the unmarshal and marshal,
the object returned from "String getElement(StreamResult rt)" must have @XmlRootElement annotation.

If you don't need to marshal it, it is ok to return any thing.

Note 5:
you can think of (lax=true) try to find out the correct type if it is JAXBElement or your definition, the other type is dom.ElementNSImpl.
and value="CHandler" deal with dom.ElementNSImpl.

Note 6:
how to output '<' instead of &lt;
the reason why you get '&lt;' is because that in the unmarshal step, the dom.ElementNSImpl object has been converted by DomHander.
Here, is the E.class, and the xml content of the dom.ElementNSImpl convert to String, and, when output string in marshell method,
it by default using '&lt;' for '<'. Using CharacterEscapeHandler to change this behavior.